[tool.poetry]
name = "academia-jedi"
version = "0.101.0a2"
description = ""
authors = ["Britodfbr <britodfbr@gmail.com>"]
packages = [
  {include='incolume', from=''}
]
[tool.poetry.dependencies]
python = "^3.8"
click = "^8.1.3"
SQLAlchemy = "^1.4.39"
pandas = "^1.4.3"
requests = "^2.28.1"
python-dotenv = "^0.20.0"
bs4 = "^0.0.1"
lxml = "^4.9.1"
jupyter = "^1.0.0"
getch = "^1.0"
flask-restful = "^0.3.9"
pony = "^0.7.16"
pydantic = "^1.10.2"
unidecode = "^1.3.6"
pysimplegui = "^4.60.4"
pysimpleguiqt = "^0.35.0"
easygui = "^0.98.3"
openpyxl = "^3.0.10"
tqdm = "^4.64.1"
customtkinter = "^5.0.5"
dynaconf = "^3.1.11"
openai = "^0.26.5"
opencv-python = "^4.7.0.68"
pytesseract = "^0.3.10"
pyspellchecker = "^0.7.1"
language-tool-python = "^2.7.1"
pypdf2 = "^3.0.1"
deprecated = "^1.2.13"
transformers = "^4.26.1"
scikit-learn = "^1.2.1"
nltk = "^3.8.1"
textblob = "^0.17.1"
xmltodict = "^0.13.0"
python-docx = "^0.8.11"


[tool.poetry.group.dev.dependencies]
markdown = "^3.4.1"
selectolax = "^0.3.11"
rstr = "^3.2.0"
aiohttp = "^3.8.3"
pwinput = "^1.0.2"
fastparquet = "^2022.12.0"
pyarrow = "^10.0.1"
pypdf2 = "^3.0.1"
pymupdf = "^1.21.1"
pdfplumber = "^0.7.6"
pdfminer3 = "^2018.12.3.0"
pytesseract = "^0.3.10"
pdf2image = "^1.16.2"
pillow = "^9.4.0"
googletrans = "^3.0.0"
taskipy = "^1.10.3"
pytest-cov = "^4.0.0"
blue = "^0.9.1"
isort = "^5.12.0"
pydocstyle = "^6.3.0"
pylint = "^3.0.0"
mypy = "^1.5.1"
mypy-extensions = "^1.0.0"
ruff = "^0.0.292"
dynaconf = "^3.2.3"
faker = "^19.6.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
log_format = '%(asctime)s; %(levelname)-8s; %(name)s; %(module)s; %(funcName)s; %(message)s'
log_date_format ='%FT%T%N%z'
addopts = "--doctest-modules --cov=incolume -sx --cov-report term-missing --cov-report html:coverage_report/html --cov-report xml:coverage_report/cov.xml"
testpaths = [
  "tests",
  "incolume/py/coding_dojo_jedi",
]
python_files = [
  "test_*.py",
  "tests.py"
]

markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "webtest: marks tests as webtest (deselect with '-m \"not webtest\"')",
  "fast: marks tests as fast (deselect with '-m \"not fast\"')",
]

[tool.coverage.html]
directory = "coverage_report/html"


[tool.coverage.xml]


[tool.coverage.run]
omit = [
  # omit anything in a .local directory anywhere
  "*/.local/*",
  # omit everything in /usr
  "/usr/*",
  # omit this single file
  "configure/truncus.py",
]


[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "logger.debug",
  "logger.info",
  "logger.warning",
  "logger.error",
  "ImportError",
  "ModuleNotFoundError",
  "__package__ =",
  "def run",
  "def terminal.",
  "__author__",
  "class IElements"
]

[tool.isort]
profile = "black"
known_first_party = "poetry"
skip = [".gitignore", ".dockerignore"]
skip_glob = ["example/*"]
extend_skip = [".md", ".json"]
extend_skip_glob = ["my_*_module.py"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 79

[tool.black]
line-length = 79
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
 /(
  ^/foo.py    # exclude a file named foo.py in the root of the project
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.pytest_cache
  | _build
  | buck-out
  | build
  | dist
  | docs
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
  | profiling
 )/
 '''

 [tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 79

[tool.pylint.basic]
# Allow shorter and longer variable names than the default.
argument-rgx = "[a-z_][a-z0-9_]*$"
attr-rgx = "[a-z_][a-z0-9_]*$"
variable-rgx = "[a-z_][a-z0-9_]*$"

# Ensure that orjson is analysed as a C extension by pylint.
extension-pkg-whitelist = "orjson"


[tool.pylint.messages_control]
disable = [
    # Disable too many and too few checks.
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-function-args",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-few-public-methods",

    # Similar lines in files (often the case in tests).
    "duplicate-code",

    # Many functions (e.g. callbacks) will naturally have unused arguments.
    "unused-argument",

    # # Disable checking that method could be a function in classes (often used for organisation).
    # "no-self-use",

    # Disable failure for TODO items in the codebase (code will always have TODOs).
    "fixme",

    # Disable docstrings checks as we don't require excessive documentation.
    "missing-docstring",

    "no-member",
    "unspecified-encoding",
]

[tool.taskipy.tasks]
prerelease={cmd='v=$(poetry version prerelease) && poetry run pytest -xv --cov-report html:coverage_report/html --cov-report xml:coverage_report/xml/cov.xml && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='poetry version prerelease'}
patch={cmd='v=$(poetry version patch) && poetry run pytest -xv --cov-report html:coverage_report/html --cov-report xml:coverage_report/xml/cov.xml && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='poetry version patch'}
preminor={cmd='v=$(poetry version preminor) && poetry run pytest -xv --cov-report html:coverage_report/html --cov-report xml:coverage_report/xml/cov.xml && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='poetry version preminor'}
premajor={cmd='v=$(poetry version premajor) && poetry run pytest -xv --cov-report html:coverage_report/html --cov-report xml:coverage_report/xml/cov.xml && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='poetry version premajor'}